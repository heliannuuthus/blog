{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { parse } from \"heliannuuthus-parse-md\";\nimport { TermMetadata } from \"heliannuuthus-terminology-store\";\nimport path from \"path\";\nimport { packageUpSync } from \"package-up\";\nimport type { LoaderContext } from \"webpack\";\n\ninterface WebpackTermsReplaceLoaderOptions {\n  termPreviewComponentPath: string;\n  termsDir: string;\n  baseUrl: string;\n}\n\ninterface WebpackTermsReplaceLoaderContext\n  extends LoaderContext<WebpackTermsReplaceLoaderOptions> {\n  query: WebpackTermsReplaceLoaderOptions;\n}\n\nconst pkg = packageUpSync({ cwd: process.cwd() }) as string;\nconst root =\n  process.platform === \"win32\" ? path.win32.dirname(pkg) : path.dirname(pkg);\n\nexport default function loader(\n  this: WebpackTermsReplaceLoaderContext,\n  source: string\n) {\n  const urlsRegex = /(?<!!)\\[\\[[^\\]]+\\]\\]\\([^)]+\\)/g;\n  const urlRegex = /\\[\\[\\s*(.*?)\\s*\\]\\]\\((.*?)\\)/s;\n  const urls = source.match(urlsRegex) || [];\n  const importStatement = `\nimport Term from \"${this.query.termPreviewComponentPath}\";\n`;\n\n  if (urls.length > 0) {\n    const { content } = parse<TermMetadata>(source)[0];\n    source = source.replace(content, importStatement + content);\n\n    for (const url of urls) {\n      const matches = url.match(urlRegex);\n      if (!matches) continue;\n\n      const [mdUrl, title, urlPath] = matches;\n      const newLineCount = (title.match(/\\n/g) || []).length;\n      if (newLineCount <= 1) {\n        const rel_path =\n          process.platform === \"win32\"\n            ? path.win32.relative(root, this.resourcePath)\n            : path.relative(root, this.resourcePath);\n\n        const pathName = new URL(\n          urlPath,\n          `http://heliannuuthus.com/${rel_path}`\n        ).pathname;\n\n        if (pathName.includes(this.query.termsDir.replace(/\\./, \"\"))) {\n          const termKey =\n            this.query.baseUrl.replace(/\\/$/, \"\") +\n            pathName.replace(/\\.(md|mdx)$/, \"\");\n\n          source = source.replace(\n            mdUrl,\n            `<Term path=\"${termKey.replace(/\\d+-/, \"\")}\">${title}</Term>`\n          );\n        }\n      }\n    }\n  }\n\n  return source;\n}\n"],"mappings":";AAAA,SAAS,aAAa;AAEtB,OAAO,UAAU;AACjB,SAAS,qBAAqB;AAc9B,IAAM,MAAM,cAAc,EAAE,KAAK,QAAQ,IAAI,EAAE,CAAC;AAChD,IAAM,OACJ,QAAQ,aAAa,UAAU,KAAK,MAAM,QAAQ,GAAG,IAAI,KAAK,QAAQ,GAAG;AAE5D,SAAR,OAEL,QACA;AACA,QAAM,YAAY;AAClB,QAAM,WAAW;AACjB,QAAM,OAAO,OAAO,MAAM,SAAS,KAAK,CAAC;AACzC,QAAM,kBAAkB;AAAA,oBACN,KAAK,MAAM,wBAAwB;AAAA;AAGrD,MAAI,KAAK,SAAS,GAAG;AACnB,UAAM,EAAE,QAAQ,IAAI,MAAoB,MAAM,EAAE,CAAC;AACjD,aAAS,OAAO,QAAQ,SAAS,kBAAkB,OAAO;AAE1D,eAAW,OAAO,MAAM;AACtB,YAAM,UAAU,IAAI,MAAM,QAAQ;AAClC,UAAI,CAAC,QAAS;AAEd,YAAM,CAAC,OAAO,OAAO,OAAO,IAAI;AAChC,YAAM,gBAAgB,MAAM,MAAM,KAAK,KAAK,CAAC,GAAG;AAChD,UAAI,gBAAgB,GAAG;AACrB,cAAM,WACJ,QAAQ,aAAa,UACjB,KAAK,MAAM,SAAS,MAAM,KAAK,YAAY,IAC3C,KAAK,SAAS,MAAM,KAAK,YAAY;AAE3C,cAAM,WAAW,IAAI;AAAA,UACnB;AAAA,UACA,4BAA4B,QAAQ;AAAA,QACtC,EAAE;AAEF,YAAI,SAAS,SAAS,KAAK,MAAM,SAAS,QAAQ,MAAM,EAAE,CAAC,GAAG;AAC5D,gBAAM,UACJ,KAAK,MAAM,QAAQ,QAAQ,OAAO,EAAE,IACpC,SAAS,QAAQ,eAAe,EAAE;AAEpC,mBAAS,OAAO;AAAA,YACd;AAAA,YACA,eAAe,QAAQ,QAAQ,QAAQ,EAAE,CAAC,KAAK,KAAK;AAAA,UACtD;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAEA,SAAO;AACT;","names":[]}
{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { parse } from \"heliannuuthus-parse-md\";\nimport { store, TermMetadata, TermData } from \"heliannuuthus-terminology-store\";\nimport { unified } from \"unified\";\nimport rehypeSanitize from \"rehype-sanitize\";\nimport rehypeStringify from \"rehype-stringify\";\nimport remarkParse from \"remark-parse\";\nimport remarkRehype from \"remark-rehype\";\nimport type { LoaderContext } from \"webpack\";\n\ninterface WebpackTermsLoaderOptions {\n  termsDir: string;\n}\n\ninterface WebpackTermsLoaderContext\n  extends LoaderContext<WebpackTermsLoaderOptions> {\n  query: WebpackTermsLoaderOptions;\n}\n\nexport default function loader(\n  this: WebpackTermsLoaderContext,\n  source: string,\n) {\n  const unixRegex = new RegExp(\n    `(${this.query.termsDir\n      .replace(/^\\.\\//, \"\")\n      .replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\")}.*?)\\.(md|mdx)`,\n  );\n\n  const winRegex = new RegExp(\n    `(${this.query.termsDir\n      .replace(/\\//g, \"\\\\\")\n      .replace(/\\./, \"\")\n      .replace(/[*+?^${}()|[\\]\\\\]/g, \"\\\\$&\")}.*?)\\.(md|mdx)`,\n  );\n\n  const unixResourcePath = this.resourcePath;\n  const winResourcePath = this.resourcePath.replace(/\\\\/, \"\\\\\\\\\");\n\n  const termMatch =\n    process.platform === \"win32\"\n      ? winResourcePath.match(winRegex)\n      : unixResourcePath.match(unixRegex);\n\n  if (termMatch) {\n    const terms = parse<TermMetadata>(source);\n    const resourcePath = termMatch[1].replace(/\\d+-/, \"\");\n    const termMap = terms.reduce(\n      (acc, term) => {\n        acc[term.metadata.slug] = {\n          ...term,\n          metadata: {\n            ...term.metadata,\n            description: unified()\n              .use(remarkParse)\n              .use(remarkRehype)\n              .use(rehypeSanitize)\n              .use(rehypeStringify)\n              .processSync(term.metadata.description)\n              .toString(\"utf-8\"),\n            authors: term.metadata.authors || [\"robot\"],\n          },\n          content: unified()\n            .use(remarkParse)\n            .use(remarkRehype)\n            .use(rehypeSanitize)\n            .use(rehypeStringify)\n            .processSync(term.content)\n            .toString(\"utf-8\"),\n        };\n\n        return acc;\n      },\n      {} as Record<string, TermData>,\n    );\n\n    store.addTerm(resourcePath, termMap);\n    this.emitFile(resourcePath + \".json\", JSON.stringify(termMap));\n\n    return `\n\nimport TOCInline from '@theme/TOCInline';\nimport Terminology from \"@site/src/components/Terminology\";\n\n<TOCInline\n  toc={toc.filter((node) => {\n    console.log(node);\n    return node.level === 2 || node.level === 4;\n  })}\n  minHeadingLevel={2}\n  maxHeadingLevel={4}\n/>\n\n<Terminology />\n`;\n  }\n  return source;\n}\n"],"mappings":";AAAA,SAAS,aAAa;AACtB,SAAS,aAAqC;AAC9C,SAAS,eAAe;AACxB,OAAO,oBAAoB;AAC3B,OAAO,qBAAqB;AAC5B,OAAO,iBAAiB;AACxB,OAAO,kBAAkB;AAYV,SAAR,OAEL,QACA;AACA,QAAM,YAAY,IAAI;AAAA,IACpB,IAAI,KAAK,MAAM,SACZ,QAAQ,SAAS,EAAE,EACnB,QAAQ,uBAAuB,MAAM,CAAC;AAAA,EAC3C;AAEA,QAAM,WAAW,IAAI;AAAA,IACnB,IAAI,KAAK,MAAM,SACZ,QAAQ,OAAO,IAAI,EACnB,QAAQ,MAAM,EAAE,EAChB,QAAQ,sBAAsB,MAAM,CAAC;AAAA,EAC1C;AAEA,QAAM,mBAAmB,KAAK;AAC9B,QAAM,kBAAkB,KAAK,aAAa,QAAQ,MAAM,MAAM;AAE9D,QAAM,YACJ,QAAQ,aAAa,UACjB,gBAAgB,MAAM,QAAQ,IAC9B,iBAAiB,MAAM,SAAS;AAEtC,MAAI,WAAW;AACb,UAAM,QAAQ,MAAoB,MAAM;AACxC,UAAM,eAAe,UAAU,CAAC,EAAE,QAAQ,QAAQ,EAAE;AACpD,UAAM,UAAU,MAAM;AAAA,MACpB,CAAC,KAAK,SAAS;AACb,YAAI,KAAK,SAAS,IAAI,IAAI;AAAA,UACxB,GAAG;AAAA,UACH,UAAU;AAAA,YACR,GAAG,KAAK;AAAA,YACR,aAAa,QAAQ,EAClB,IAAI,WAAW,EACf,IAAI,YAAY,EAChB,IAAI,cAAc,EAClB,IAAI,eAAe,EACnB,YAAY,KAAK,SAAS,WAAW,EACrC,SAAS,OAAO;AAAA,YACnB,SAAS,KAAK,SAAS,WAAW,CAAC,OAAO;AAAA,UAC5C;AAAA,UACA,SAAS,QAAQ,EACd,IAAI,WAAW,EACf,IAAI,YAAY,EAChB,IAAI,cAAc,EAClB,IAAI,eAAe,EACnB,YAAY,KAAK,OAAO,EACxB,SAAS,OAAO;AAAA,QACrB;AAEA,eAAO;AAAA,MACT;AAAA,MACA,CAAC;AAAA,IACH;AAEA,UAAM,QAAQ,cAAc,OAAO;AACnC,SAAK,SAAS,eAAe,SAAS,KAAK,UAAU,OAAO,CAAC;AAE7D,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBT;AACA,SAAO;AACT;","names":[]}
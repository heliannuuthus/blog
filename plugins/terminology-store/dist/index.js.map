{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import fs from \"fs\";\nimport path from \"path\";\n\nconst docusaurusPath = path.resolve(\".docusaurus\");\nconst glossaryPath = path.resolve(\".docusaurus/glossary.json\");\n\nexport interface TermMetadata {\n  slug: string;\n  title: string;\n  description: string;\n  authors: string[];\n}\n\nexport interface TermData {\n  metadata: TermMetadata;\n  content: string;\n}\n\nclass TerminologyStore {\n  terms: Record<string, Record<string, TermData>> = {};\n  updated: string[] = [];\n  private static instance: TerminologyStore;\n\n  constructor() {\n    if (!fs.existsSync(docusaurusPath)) {\n      fs.mkdirSync(docusaurusPath);\n    }\n\n    fs.writeFileSync(glossaryPath, \"{}\");\n    this.terms = this.readGlossary();\n    this.updated = Object.keys(this.terms);\n  }\n\n  addTerm(resourcePath: string, metadata: Record<string, TermData>) {\n    this.terms[resourcePath] = metadata;\n    fs.writeFileSync(glossaryPath, JSON.stringify(this.terms));\n    this.setUpdatedResourcePath(resourcePath);\n    return { resourcePath };\n  }\n\n  exists(resourcePath: string): boolean {\n    return this.terms[resourcePath] !== undefined;\n  }\n\n  readGlossary(): Record<string, Record<string, TermData>> {\n    return JSON.parse(fs.readFileSync(glossaryPath, \"utf8\"));\n  }\n\n  setUpdatedResourcePath(resourcePath: string): void {\n    this.updated.push(resourcePath);\n  }\n\n  clearUpdatedResourcePaths(): void {\n    this.updated = [];\n  }\n\n  public static getInstance(): TerminologyStore {\n    if (!this.instance) {\n      this.instance = new TerminologyStore();\n    }\n    return this.instance;\n  }\n}\n\nexport const store = TerminologyStore.getInstance();\n"],"mappings":";AAAA,OAAO,QAAQ;AACf,OAAO,UAAU;AAEjB,IAAM,iBAAiB,KAAK,QAAQ,aAAa;AACjD,IAAM,eAAe,KAAK,QAAQ,2BAA2B;AAc7D,IAAM,mBAAN,MAAM,kBAAiB;AAAA,EAKrB,cAAc;AAJd,iBAAkD,CAAC;AACnD,mBAAoB,CAAC;AAInB,QAAI,CAAC,GAAG,WAAW,cAAc,GAAG;AAClC,SAAG,UAAU,cAAc;AAAA,IAC7B;AAEA,OAAG,cAAc,cAAc,IAAI;AACnC,SAAK,QAAQ,KAAK,aAAa;AAC/B,SAAK,UAAU,OAAO,KAAK,KAAK,KAAK;AAAA,EACvC;AAAA,EAEA,QAAQ,cAAsB,UAAoC;AAChE,SAAK,MAAM,YAAY,IAAI;AAC3B,OAAG,cAAc,cAAc,KAAK,UAAU,KAAK,KAAK,CAAC;AACzD,SAAK,uBAAuB,YAAY;AACxC,WAAO,EAAE,aAAa;AAAA,EACxB;AAAA,EAEA,OAAO,cAA+B;AACpC,WAAO,KAAK,MAAM,YAAY,MAAM;AAAA,EACtC;AAAA,EAEA,eAAyD;AACvD,WAAO,KAAK,MAAM,GAAG,aAAa,cAAc,MAAM,CAAC;AAAA,EACzD;AAAA,EAEA,uBAAuB,cAA4B;AACjD,SAAK,QAAQ,KAAK,YAAY;AAAA,EAChC;AAAA,EAEA,4BAAkC;AAChC,SAAK,UAAU,CAAC;AAAA,EAClB;AAAA,EAEA,OAAc,cAAgC;AAC5C,QAAI,CAAC,KAAK,UAAU;AAClB,WAAK,WAAW,IAAI,kBAAiB;AAAA,IACvC;AACA,WAAO,KAAK;AAAA,EACd;AACF;AAEO,IAAM,QAAQ,iBAAiB,YAAY;","names":[]}
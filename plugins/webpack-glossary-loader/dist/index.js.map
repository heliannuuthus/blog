{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { parse } from \"heliannuuthus-parse-md\";\nimport { store, TermMetadata } from \"heliannuuthus-terminology-store\";\nimport path from \"path\";\nimport type { LoaderContext } from \"webpack\";\n\ninterface WebpackGlossaryLoaderOptions {\n  glossaryComponentPath: string;\n  glossaryDir: string;\n}\n\ninterface WebpackGlossaryLoaderContext extends LoaderContext<WebpackGlossaryLoaderOptions> {\n  query: WebpackGlossaryLoaderOptions;\n}\n\nexport default function loader(\n  this: WebpackGlossaryLoaderContext,\n  source: string\n) {\n  const importStatement = `\nimport Glossary from \"${\n    (this.query as WebpackGlossaryLoaderOptions).glossaryComponentPath\n  }\";\n  \n`;\n\n  this.cacheable(false);\n  this.addDependency(\n    path.posix.join(\n      (this.query as WebpackGlossaryLoaderOptions).glossaryDir,\n      \"glossary.json\"\n    )\n  );\n  this.emitFile(\n    path.posix.join(\n      (this.query as WebpackGlossaryLoaderOptions).glossaryDir,\n      \"glossary.json\"\n    ),\n    JSON.stringify(store.terms)\n  );\n\n  const { content } = parse<TermMetadata>(source)[0];\n  source = source.replace(content, importStatement + content);\n  source += `\n  \n<Glossary />\n`;\n  return source;\n}\n"],"mappings":";AAAA,SAAS,aAAa;AACtB,SAAS,aAA2B;AACpC,OAAO,UAAU;AAYF,SAAR,OAEL,QACA;AACA,QAAM,kBAAkB;AAAA,wBAErB,KAAK,MAAuC,qBAC/C;AAAA;AAAA;AAIA,OAAK,UAAU,KAAK;AACpB,OAAK;AAAA,IACH,KAAK,MAAM;AAAA,MACR,KAAK,MAAuC;AAAA,MAC7C;AAAA,IACF;AAAA,EACF;AACA,OAAK;AAAA,IACH,KAAK,MAAM;AAAA,MACR,KAAK,MAAuC;AAAA,MAC7C;AAAA,IACF;AAAA,IACA,KAAK,UAAU,MAAM,KAAK;AAAA,EAC5B;AAEA,QAAM,EAAE,QAAQ,IAAI,MAAoB,MAAM,EAAE,CAAC;AACjD,WAAS,OAAO,QAAQ,SAAS,kBAAkB,OAAO;AAC1D,YAAU;AAAA;AAAA;AAAA;AAIV,SAAO;AACT;","names":[]}